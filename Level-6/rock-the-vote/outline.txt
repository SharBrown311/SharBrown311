----->Database
 --->Issue Collection
      ->Issue document
          {
            title: "String",
            description: "String",
            imgUrl: "String",
            createdOn: Data, 
            user: ObjectId,
            votes: Number,
            votedUsers: Array of Strings,
            comments: an array of Objects
            }
  --->Comment Collection?
  
  
  --->User Collection 
      -> User document
        {
          username: "String",
          password: "String"
        }

adding an issue inside IssueRouter
 the route handler is replaced with the addIssue function. The function is defined using the async/await syntax to handle the asynchronous operations of creating and saving the issue.

Inside the then block, the new issue object is created, and then it is saved to the database using newIssue.save(). If the saving process is successful, the saved issue is returned as the response.

If there is an error during the saving process, the catch block is executed, and a 500 status code is returned along with an error message.

The addIssue function is then passed as the route handler to the POST /api/issue route.

Route to retrieve a single issue by id

the route GET /api/issue/:issueId is created using the issueRouter from Express Router. The issueId parameter is extracted from the URL using req.params.

Inside the route handler, the findById method is used to search for the issue by its ID in the database. If the issue is found, it is returned as the response with a 200 status code.

If the issue is not found, a 404 status code is returned with an error message indicating that the issue was not found.

If there is any error during the database operation, a 500 status code is returned with an error message.

Adding a comment to an issue

the route POST /api/issue/:issueId/comment is created using the issueRouter from Express Router. The issueId parameter is extracted from the URL using req.params. The comment is obtained from the request body using req.body.

Inside the route handler, the findById method is used to search for the issue by its ID in the database. If the issue is found, the comment is added to the comments array of the issue using issue.comments.push(comment).

The updated issue is then saved using issue.save() to persist the changes to the database.

If the update is successful, the updated issue is returned as the response with a 200 status code.

If the issue is not found, a 404 status code is returned with an error message indicating that the issue was not found.

If there is any error during the database operation, a 500 status code is returned with an error message.



DELETING A COMMENT FROM AN ISSUE

 the route DELETE /api/issue/:issueId/comment/:commentId is created using the issueRouter from Express Router. The issueId and commentId parameters are extracted from the URL using req.params.

Inside the route handler, the findById method is used to search for the issue by its ID in the database. If the issue is found, the index of the comment in the comments array is obtained using findIndex.

If the comment is not found (i.e., commentIndex is -1), a 404 status code is returned with an error message indicating that the comment was not found.

If the comment is found, it is removed from the comments array using splice.

The updated issue is then saved using issue.save() to persist the changes to the database.

If the update is successful, the updated issue is returned as the response with a 200 status code.

If the issue is not found, a 404 status code is returned with an error message indicating that the issue was not found.


PUTTING UPVOTE AND DOWNVOTE ON AN ISSUE

--->UPVOTE
 the route PUT /api/issue/upvote/:issueId is created to handle the upvoting functionality for a specific issue. The :issueId parameter represents the ID of the issue to be upvoted.

Inside the route handler, the issue is found by its ID using Issue.findByIdAndUpdate(). The $inc operator is used to increment the upvotes field of the issue by 1. The { new: true } option ensures that the updated issue is returned.

If the issue is not found, a 404 status code is returned with an error message. If the update is successful, the updated issue is returned as the response with a 200 status code.

If there is any error during the database operation, a 500 status code is returned with an error message.
GETTING ALL ISSUES OF SPECIFIC USER

the route GET /api/issue/user is created to retrieve the issues of the logged-in user. Inside the route handler, the user's ID is obtained from req.auth.id (assuming you have access to the user's ID).

The Issue.find({ user: userId }) query searches for all issues where the user field matches the user's ID. The retrieved issues are then returned as the response with a 200 status code.

If there is any error during the database operation, a 500 status code is returned with an error message.